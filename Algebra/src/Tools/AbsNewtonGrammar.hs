module Tools.AbsNewtonGrammar where

-- Haskell module generated by the BNF converter

data YP =
   YPMulti YP YP
 | YPSing Term
  deriving (Eq,Ord,Show)

data Term =
   TermNonConst SCoeff Mon
 | TermConst SCoeff
  deriving (Eq,Ord,Show)

data Mon =
   MonomX XMon
 | MonomY YMon
 | MonomXY XMon YMon
  deriving (Eq,Ord,Show)

data XMon =
   XMonom Integer
  deriving (Eq,Ord,Show)

data YMon =
   YMonom Integer
  deriving (Eq,Ord,Show)

data SCoeff =
   SCoeffP Coeff
 | SCoeffM Coeff
  deriving (Eq,Ord,Show)

data Coeff =
   CoeffR Coeff Coeff
 | CoeffI Integer
  deriving (Eq,Ord,Show)

