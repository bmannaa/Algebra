module Tools.SkelNewtonGrammar where

-- Haskell module generated by the BNF converter

import Tools.AbsNewtonGrammar
import Tools.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transYP :: YP -> Result
transYP x = case x of
  YPMulti yp0 yp  -> failure x
  YPSing term  -> failure x


transTerm :: Term -> Result
transTerm x = case x of
  TermNonConst scoeff mon  -> failure x
  TermConst scoeff  -> failure x


transMon :: Mon -> Result
transMon x = case x of
  MonomX xmon  -> failure x
  MonomY ymon  -> failure x
  MonomXY xmon ymon  -> failure x


transXMon :: XMon -> Result
transXMon x = case x of
  XMonom n  -> failure x


transYMon :: YMon -> Result
transYMon x = case x of
  YMonom n  -> failure x


transSCoeff :: SCoeff -> Result
transSCoeff x = case x of
  SCoeffP coeff  -> failure x
  SCoeffM coeff  -> failure x


transCoeff :: Coeff -> Result
transCoeff x = case x of
  CoeffR coeff0 coeff  -> failure x
  CoeffI n  -> failure x



